{"version":3,"sources":["hooks/useInputState.jsx","reducers/todoReducer.jsx","contexts/todosContexts.jsx","hooks/useLocalStorageReducer.jsx","EditTodoForm.jsx","Todo.jsx","hooks/useToggle.jsx","TodoList.jsx","TodoForm.jsx","TodoApp.jsx","App.js","serviceWorker.js","index.js"],"names":["initialVal","useState","value","setValue","e","target","reducer","state","action","type","id","uuid","task","completed","filter","todo","map","newTask","defaultTodos","TodosContext","createContext","DispatchContext","TodosProvider","props","key","defaultVal","useReducer","val","JSON","parse","window","localStorage","getItem","String","dispatch","useEffect","setItem","stringify","useLocalStorageReducer","todoReducer","todos","Provider","children","EditTodoForm","toggleEditForm","useContext","useInputState","handleChange","reset","onSubmit","preventDefault","style","marginLeft","width","TextField","margin","onChange","fullWidth","autoFocus","memo","setState","toggle","useToggle","isEditing","ListItem","height","Checkbox","tabIndex","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","length","Paper","List","i","Fragment","Divider","TodoForm","padding","label","TodoApp","backgroundColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70511abd.chunk.js","sourcesContent":["import { useState } from \"react\";\nexport default initialVal => {\n\tconst [value, setValue] = useState(initialVal);\n\tconst handleChange = e => {\n\t\tsetValue(e.target.value);\n\t};\n\tconst reset = () => {\n\t\tsetValue(\"\");\n\t};\n\treturn [value, handleChange, reset];\n};\n","import uuid from \"uuid/v4\";\n\nconst reducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase \"ADD\":\n\t\t\treturn [\n\t\t\t\t...state,\n\t\t\t\t{ id: uuid(), task: action.task, completed: false },\n\t\t\t];\n\t\tcase \"REMOVE\":\n\t\t\treturn state.filter(todo => todo.id !== action.id);\n\t\tcase \"TOGGLE\":\n\t\t\treturn state.map(todo =>\n\t\t\t\ttodo.id === action.id\n\t\t\t\t\t? { ...todo, completed: !todo.completed }\n\t\t\t\t\t: todo\n\t\t\t);\n\t\tcase \"EDIT\":\n\t\t\treturn state.map(todo =>\n\t\t\t\ttodo.id === action.id ? { ...todo, task: action.newTask } : todo\n\t\t\t);\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default reducer;\n","import React, { createContext } from \"react\";\nimport { useLocalStorageReducer } from \"../hooks/useLocalStorageReducer\";\nimport todoReducer from \"../reducers/todoReducer\";\n\nconst defaultTodos = [\n\t{ id: 1, task: \"Mow the lawn using goats\", completed: false },\n\t{ id: 2, task: \"Release lady bugs into garden\", completed: true },\n];\n\nexport const TodosContext = createContext();\nexport const DispatchContext = createContext();\n\nexport function TodosProvider(props) {\n\tconst [todos, dispatch] = useLocalStorageReducer(\n\t\t\"todos\",\n\t\tdefaultTodos,\n\t\ttodoReducer\n\t);\n\n\treturn (\n\t\t<TodosContext.Provider value={todos}>\n\t\t\t<DispatchContext.Provider value={dispatch}>\n\t\t\t\t{props.children}\n\t\t\t</DispatchContext.Provider>\n\t\t</TodosContext.Provider>\n\t);\n}\n","import { useReducer, useEffect } from \"react\";\n\nfunction useLocalStorageReducer(key, defaultVal, reducer) {\n\tconst [state, dispatch] = useReducer(reducer, defaultVal, () => {\n\t\tlet val;\n\t\ttry {\n\t\t\tval = JSON.parse(\n\t\t\t\twindow.localStorage.getItem(key) || String(defaultVal)\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tval = defaultVal;\n\t\t}\n\t\treturn val;\n\t});\n\n\t// use useEffect to update localstorage when state changes\n\tuseEffect(() => {\n\t\twindow.localStorage.setItem(key, JSON.stringify(state));\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [state]);\n\n\treturn [state, dispatch];\n}\n\nexport { useLocalStorageReducer };\n","import React, { useContext } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport useInputState from \"./hooks/useInputState\";\nimport { DispatchContext } from \"./contexts/todosContexts\";\n\nexport default function EditTodoForm({ id, task, toggleEditForm }) {\n\tconst dispatch = useContext(DispatchContext);\n\tconst [value, handleChange, reset] = useInputState(task);\n\n\treturn (\n\t\t<form\n\t\t\tonSubmit={e => {\n\t\t\t\te.preventDefault();\n\t\t\t\tdispatch({ type: \"EDIT\", id: id, newTask: value });\n\t\t\t\treset();\n\t\t\t\ttoggleEditForm();\n\t\t\t}}\n\t\t\tstyle={{ marginLeft: \"1rem\", width: \"100%\" }}>\n\t\t\t<TextField\n\t\t\t\tmargin=\"normal\"\n\t\t\t\tvalue={value}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tfullWidth\n\t\t\t\tautoFocus\n\t\t\t/>\n\t\t</form>\n\t);\n}\n","import React, { useContext, memo } from \"react\";\nimport useToggle from \"./hooks/useToggle\";\nimport EditTodoForm from \"./EditTodoForm\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { DispatchContext } from \"./contexts/todosContexts\";\n\nfunction Todo({ task, completed, id }) {\n\tconst dispatch = useContext(DispatchContext);\n\tconst [isEditing, toggle] = useToggle(false);\n\treturn (\n\t\t<div>\n\t\t\t<ListItem style={{ height: \"64px\" }}>\n\t\t\t\t{isEditing ? (\n\t\t\t\t\t<EditTodoForm id={id} task={task} toggleEditForm={toggle} />\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t\tchecked={completed}\n\t\t\t\t\t\t\tonClick={() => dispatch({ type: \"TOGGLE\", id: id })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ListItemText\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\ttextDecoration: completed\n\t\t\t\t\t\t\t\t\t? \"line-through\"\n\t\t\t\t\t\t\t\t\t: \"none\",\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t{task}\n\t\t\t\t\t\t</ListItemText>\n\t\t\t\t\t\t<ListItemSecondaryAction>\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\taria-label=\"Delete\"\n\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\tdispatch({ type: \"REMOVE\", id: id })\n\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t<DeleteIcon />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t<IconButton aria-label=\"Edit\" onClick={toggle}>\n\t\t\t\t\t\t\t\t<EditIcon />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t</ListItemSecondaryAction>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</ListItem>\n\t\t</div>\n\t);\n}\n\nexport default memo(Todo);\n","import { useState } from \"react\";\n\nexport default function useToggle(initialVal = false) {\n\tconst [state, setState] = useState(initialVal);\n\tconst toggle = () => {\n\t\tsetState(!state);\n\t};\n\treturn [state, toggle];\n}\n","import React, { useContext } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Todo from \"./Todo\";\nimport { TodosContext } from \"./contexts/todosContexts\";\n\nexport default function TodoList() {\n\tconst todos = useContext(TodosContext);\n\tif (todos.length)\n\t\treturn (\n\t\t\t<Paper>\n\t\t\t\t<List>\n\t\t\t\t\t{todos.map((todo, i) => (\n\t\t\t\t\t\t<React.Fragment key={i}>\n\t\t\t\t\t\t\t<Todo {...todo} key={todo.id} />\n\t\t\t\t\t\t\t{i < todos.length - 1 && <Divider />}\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t))}\n\t\t\t\t</List>\n\t\t\t</Paper>\n\t\t);\n\treturn null;\n}\n","import React, { useContext } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport useInputState from \"./hooks/useInputState\";\nimport { DispatchContext } from \"./contexts/todosContexts\";\n\nexport default function TodoForm() {\n\tconst [value, handleChange, reset] = useInputState(\"\");\n\tconst dispatch = useContext(DispatchContext);\n\n\treturn (\n\t\t<div>\n\t\t\t<Paper style={{ margin: \"1rem 0\", padding: \"0 1rem\" }}>\n\t\t\t\t<form\n\t\t\t\t\tonSubmit={e => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tdispatch({ type: \"ADD\", task: value });\n\t\t\t\t\t\treset();\n\t\t\t\t\t}}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\tlabel=\"Add New Todo\"\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t/>\n\t\t\t\t</form>\n\t\t\t</Paper>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TodoList from \"./TodoList\";\nimport TodoForm from \"./TodoForm\";\nimport { TodosProvider } from \"./contexts/todosContexts\";\n\nexport default function TodoApp() {\n\treturn (\n\t\t<div>\n\t\t\t<Paper\n\t\t\t\tstyle={{\n\t\t\t\t\tpadding: 0,\n\t\t\t\t\tmargin: 0,\n\t\t\t\t\theight: \"100vh\",\n\t\t\t\t\tbackgroundColor: \"#fafafa\",\n\t\t\t\t}}\n\t\t\t\televation={0}>\n\t\t\t\t<AppBar\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tposition=\"static\"\n\t\t\t\t\tstyle={{ height: \"64px\" }}>\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Typography color=\"inherit\">\n\t\t\t\t\t\t\tTodos with Hooks\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t\t<Grid container justify=\"center\" style={{ marginTop: \"1rem\" }}>\n\t\t\t\t\t<Grid item xs={11} md={8} lg={4}>\n\t\t\t\t\t\t<TodosProvider>\n\t\t\t\t\t\t\t<TodoForm />\n\t\t\t\t\t\t\t<TodoList />\n\t\t\t\t\t\t</TodosProvider>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Paper>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport TodoApp from \"./TodoApp\";\nimport \"./App.css\";\n\nfunction App() {\n\treturn <TodoApp />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}